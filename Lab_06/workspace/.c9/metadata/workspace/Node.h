{"filter":false,"title":"Node.h","tooltip":"/Node.h","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":34,"column":1},"action":"insert","lines":["#include test.h","using namespace std;","","","","//all tests return true if passed, false if failed","","","","test::test(LinkedListOfInts testableList)","{","    bool testPassed = false;","    testPassed = testIsEmpty(testableList);","    cout << \"Testing isEmpty results: \" + testPassed;","}","","//tests isEmpty","bool test::testIsEmpty(LinkedListOfInts testList)","{","    if(testList->isEmpty())","    {","        cout << \"An empty list was detected.\";","        return true;","    }","    else","    {","        cout << \"An empty list was not detected...\";","        return false;","    }","}","","bool test::testSize()","{","    ","}"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":34,"column":1},"action":"remove","lines":["#include test.h","using namespace std;","","","","//all tests return true if passed, false if failed","","","","test::test(LinkedListOfInts testableList)","{","    bool testPassed = false;","    testPassed = testIsEmpty(testableList);","    cout << \"Testing isEmpty results: \" + testPassed;","}","","//tests isEmpty","bool test::testIsEmpty(LinkedListOfInts testList)","{","    if(testList->isEmpty())","    {","        cout << \"An empty list was detected.\";","        return true;","    }","    else","    {","        cout << \"An empty list was not detected...\";","        return false;","    }","}","","bool test::testSize()","{","    ","}"],"id":2},{"start":{"row":0,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["/**","*\t@author","*\t@date ","*\t@brief A header file for templated Node class","*/","","#ifndef NODE_H","#define NODE_H","","template <typename T>","class Node","{","\tpublic:","","\t/** @pre None","\t*   @post A node is created and the value is stored","\t*/","\tNode(T value);","","\t/**","\t*   @pre None","\t*   @post None","\t*   @return Returns the value stored in the node\t","\t*/","\tT getValue() const;","","\t/** @pre the value is a valid T.","\t*   @post Stores the value in the node","\t*   @return None","\t*/","\tvoid setValue(T value);","","","\t/**","\t*   @pre None","\t*   @post None","\t*   @return Returns a pointer to the next node, or nullptr if there is no next node.","\t*/","\tNode<T>* getNext() const;","","\t/**","\t*   @pre Next is a pointer to a valid node or nullptr.","\t*   @post Sets the member pointer to point at the object (or nullptr) passed in.","\t*   @return None.","\t*/","\tvoid setNext(Node<T>* next);","","\tprivate:","\tT m_value;","\tNode<T>* m_next;","};","","#include \"Node.hpp\"","","#endif",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":18,"column":0},"end":{"row":18,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1509597451804,"hash":"d33deecfce8b3a546b7b2856f5aa06cddf5b1e8c"}