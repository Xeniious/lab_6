{"filter":false,"title":"LinkedListOfInts.h","tooltip":"/LinkedListOfInts.h","undoManager":{"mark":15,"position":15,"stack":[[{"start":{"row":0,"column":0},"end":{"row":83,"column":0},"action":"insert","lines":["/**","*\t@file LinkedListOfInts.h","*\t@author ","*\t@date ","*\t@brief A header file for Linked List class","*/","","#ifndef LINKED_LIST_H","#define LINKED_LIST_H","","#include <iostream>","#include <vector>","#include \"List.h\"","#include \"Node.h\"","","class LinkedListOfInts : public List<int>","{","\tpublic:","\t/** @pre None.","\t*   @post An empty list is created.","\t*/","\tLinkedListOfInts();","\t","\t/** @pre None.","\t*   @post Deletes all nodes in the list.","\t*/","\t~LinkedListOfInts();\t","","\t/** @pre None.","\t*   @post None.","\t*   @return true if the list is empty, false otherwise.","\t*/\t","\tbool isEmpty() const;","","\t/** @pre None.","\t*   @post None.","\t*   @return the number of elements in the list.","\t*/\t","\tint size() const;","","\t/** @pre the value is a valid T.","\t*   @post none.","\t*   @return true if the value is in the list, false otherwise.","\t*/\t","\tbool search(int value) const;","","\t/** @pre None","\t*   @post None","\t*   @return A standard vector with the contents of the list","\t*   NOTE: This method is guaranteed to work. It's only one guaranteed though","\t*/\t","\tstd::vector<int> toVector() const;","","\t/** @pre the value is a valid T.","\t*   @post One new element added to the end of the list.","\t*   @return none.","\t*/\t","\tvoid addBack(int value);","","\t/** @pre the value is a valid T.","\t*   @post One new element added to the front of the list.","\t*   @return none.","\t*/\t","\tvoid addFront(int value);","","\t/** @pre None","\t*   @post One element is removed from the back of the list.","\t*   @return true if the back element was removed, false if the list is empty.","\t*/\t","\tbool removeBack();\t","","\t/** @pre None","\t*   @post One element is removed from the front of the list.","\t*   @return true if the front element was removed, false if the list is empty.","\t*/\t","\tbool removeFront();","","\tprivate:","\tNode<int>* m_front;","\tint m_size;","};","","#endif",""],"id":1}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["C"],"id":2}],[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["h"],"id":3}],[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["r"],"id":4}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["i"],"id":5}],[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["s"],"id":6}],[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["t"],"id":7}],[{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"insert","lines":["o"],"id":8}],[{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"remove","lines":["o"],"id":9}],[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"remove","lines":["t"],"id":10}],[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"remove","lines":["s"],"id":11}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"remove","lines":["i"],"id":12}],[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"remove","lines":["r"],"id":13}],[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"remove","lines":["h"],"id":14}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"remove","lines":["C"],"id":15}],[{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"remove","lines":[" "],"id":16}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":28,"column":1},"end":{"row":31,"column":3},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":283,"mode":"ace/mode/c_cpp"}},"timestamp":1509920946034,"hash":"c953aed769fcc09d8465db39f60bb5b58466d4c2"}